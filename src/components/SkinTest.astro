---
import skinTestData from "../data/skintest.json";
import imageCombinationsData from "../data/imageCombinations.json";

let tokenN = "";
const cookieString = Astro.request.headers.get("cookie");
if (cookieString) {
  const cookies = Object.fromEntries(
    cookieString.split("; ").map((c) => c.split("="))
  );
  tokenN = cookies.user_jwt_token;
  console.log("Token Already Exists---> ", cookies.user_jwt_token);
}
const response = await fetch(
  `https://stg-api.klira.skin/api/v1/skin-test/saved-answers`,
  {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
      Cookie: `user_jwt_token=${tokenN}`,
    },
    credentials: "include",
  }
);
const SavedAnswers = await response.json();
---

<div id="app">
  <div id="categoryQuestions"></div>
  <!-- <div id="finishPage" class="page" style="display: none;">
    <div class="content">
      <h1>Your Results</h1>
      <div class="result-container">
        <h2>Your Skin Size</h2>
        <div class="skin-size-number"></div>
        <p class="result-description">
          Based on your answers, we have calculated your unique skin size. This
          number helps us understand your skin's specific needs and
          characteristics.
        </p>
      </div>
    </div>
  </div> -->
</div>

<style is:inline>
  @import url("https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap");

  @font-face {
    font-family: "Monaco";
    src: url("/fonts/Monaco.ttf") format("truetype");
    font-weight: normal;
    font-style: normal;
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: "Times New Roman", Times, serif;
    -webkit-tap-highlight-color: transparent;
  }

  /* Base styles with mobile-first approach */
  body {
    color: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    transition: background-color 0.3s ease;
  }

  body.white-bg {
    background-color: #fff;
    color: #000;
  }

  body.black-bg {
    background-color: #000;
  }

  #app {
    width: 100%;
    max-width: 800px;
    height: 100vh;
    position: relative;
  }

  .category-tabs {
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 40px 0;
  }

  .category-tab {
    color: #777;
    text-decoration: none;
    padding: 0 8px;
    font-size: 18px;
    opacity: 0.5;
    font-family: "Inter", sans-serif;
    font-weight: 300;
  }

  .separator {
    color: #555;
    margin: 0 8px;
    font-size: 18px;
  }

  .category-tab.active {
    color: #fff;
    opacity: 1;
  }

  .arrow-img {
    width: 16px;
    height: 16px;
    object-fit: contain;
    display: block;
  }
  .page {
    flex-direction: column;
    justify-content: space-between;
    min-height: 100vh;
    padding-top: 40px;
    text-align: center;
  }

  /* Content styles */
  .content {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    overflow: hidden;
    width: 100%;
  }

  h1 {
    font-size: 28px;
    margin-bottom: 10px;
    letter-spacing: 2px;
    font-style: italic;
  }

  h2 {
    font-size: 18px; /* Smaller base size for mobile */
    margin-bottom: 15px;
    max-width: 100%;
    padding: 0 10px;
    font-family: "Inter";
  }

  p {
    font-size: 13px;
    line-height: 1.4;
    max-width: 100%;
    font-weight: 100;
    font-family: "Monaco";
  }

  .black-bg p {
    color: rgba(255, 255, 255, 0.8);
  }

  .progress {
    margin-bottom: 15px;
    font-size: 14px;
    font-family: "Monaco";
    margin-top: 15px;
  }

  .white-bg .progress {
    color: #666;
  }

  .navigation {
    display: flex;
    justify-content: center;
    gap: 80px; /* Reduced from 150px for mobile */
    width: 100%;
  }

  .nav-button {
    width: 45px; /* Slightly smaller for mobile */
    height: 32px;
    background-color: transparent;
    font-size: 18px; /* Smaller font for mobile */
    cursor: pointer;
    transition: background-color 0.3s;
    display: flex;
    justify-content: center;
    align-items: center;
    border: 1px solid #fff;
  }

  .white-bg .nav-button {
    border: 1px solid #000;
    color: #000;
  }

  .black-bg .nav-button {
    border: 1px solid #fff;
    color: #fff;
  }

  .nav-button.next {
    background-color: #fff;
    color: #000;
  }

  .white-bg .nav-button.next {
    background-color: #000;
    color: #fff;
    border: 1px solid #000;
  }

  .white-bg .nav-button.prev {
    background-color: #fff;
    color: #000;
  }

  .black-bg .nav-button.prev {
    background-color: #000;
    color: #fff;
  }

  .options {
    display: flex;
    flex-direction: column;
    gap: 8px;
    width: 100%;
    max-width: 90%; /* Changed from fixed 400px to be more responsive */
    margin: 15px 0;
  }

  .option-button {
    padding: 12px 30px; /* Slightly smaller padding for mobile */
    background-color: #f0f0f0;
    border: none;
    color: #000;
    font-size: 16px; /* Smaller font for mobile */
    cursor: pointer;
    transition: background-color 0.3s;
    width: 100%;
    position: relative;
    font-family: "Inter";
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
  }

  .option-button:hover {
    background-color: #ddd;
  }

  .option-button.selected {
    background-color: #000;
    color: #fff;
  }

  /* Checkmark for selected option */
  .option-button.selected::after {
    content: "";
    position: absolute;
    right: 15px;
    top: 50%;
    transform: translateY(-50%);
    width: 18px;
    height: 18px;
    background-color: white;
    border-radius: 50%;

    display: none;
  }

  .option-button.selected::before {
    content: "";
    position: absolute;
    right: 21px;
    top: 46%;
    transform: translateY(-40%) rotate(45deg);
    width: 3px;
    height: 7px;
    border-right: 2px solid black;
    border-bottom: 2px solid black;
    z-index: 1;

    display: none;
  }

  .option-button:hover {
    background-color: #000;
    color: #fff;
  }

  /* Responsive adjustments for checkmark */
  @media screen and (max-width: 576px) {
    .option-button.selected::after {
      width: 16px;
      height: 16px;
      right: 12px;
    }

    .option-button.selected::before {
      width: 4px;
      height: 8px;
      right: 17px;
    }
  }

  .error-message {
    color: #ff0000;
    font-size: 14px;
    margin-top: 2px;
    display: none;
  }

  /* Start button for welcome page */
  .start-button {
    width: 300px;
    padding: 12px;
    margin: 0 auto;
    border: 1px solid #fff;
    background-color: transparent;
    color: #fff;
    text-decoration: none;
    text-align: center;
    font-family: "Inter";
    font-size: 16px;
    cursor: pointer;
    transition:
      background-color 0.3s,
      color 0.3s;
  }

  .start-button:hover {
    background-color: #fff;
    color: #000;
  }

  .start-button-container {
    display: flex;
    justify-content: center;
    margin-bottom: 20px;
    width: 100%;
  }

  /* Calculate Results button for last page */
  .calculate-results-button {
    min-width: 135px;
    padding: 12px 20px;
    margin: 0;
    background-color: #000;
    color: #fff;
    border: none;
    text-decoration: none;
    text-align: center;
    font-family: "Times New Roman", Times, serif;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s;
  }

  /* Save Progress button */
  .save-progress-button {
    background: none;
    border: none;
    color: inherit;
    font-family: "Monaco";
    font-size: 14px;
    cursor: pointer;
    padding: 0;
    margin: 0;
    text-align: center;
    text-decoration: underline;
  }

  .save-progress-container {
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 0;
    flex: 1;
    text-align: center;
  }

  .navigation-with-save {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 90%;
    max-width: 380px;
    margin: 0 auto 20px;
  }

  .navigation-buttons {
    display: flex;
    justify-content: space-between;
    width: 100%;
  }

  .calculate-results-container {
    display: flex;
    justify-content: center;
    margin-bottom: 20px;
    width: 100%;
  }

  /* Specific adjustments for page 5 */
  #page5 h2 {
    font-size: 18px; /* Smaller for mobile */
  }

  .image-container {
    width: 80px; /* Smaller for mobile */
    height: 80px;
    border-radius: 50%;
    overflow: visible;
    cursor: pointer;
    position: relative;
  }

  /* Remove cursor: pointer for images on pages 11, 33, and 36 */
  #page11 .image-container,
  #page33 .image-container,
  #page36 .image-container {
    cursor: default;
  }

  .image-container .comparison-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 50%;
  }

  .selection-arrow {
    position: absolute;
    width: 14px; /* Smaller for mobile */
    height: 14px;
    background-color: black;
    border-radius: 50%;
    top: 0px;
    right: 7px;
    opacity: 0;
    transition: opacity 0.3s ease;
    display: none;
  }

  .selection-arrow::after {
    content: "";
    position: absolute;
    width: 7px; /* Smaller for mobile */
    height: 3px;
    border: 2px solid rgb(247, 247, 247);
    border-top: none;
    border-right: none;
    top: 45%;
    left: 50%;
    transform: translate(-50%, -50%) rotate(-45deg);
  }

  .image-container.selected .selection-arrow {
    display: block;
    opacity: 1;
  }

  .image-container.selected {
    border: 1px solid #000;
    overflow: visible;
    padding: 2px;
  }

  .image-container img {
    max-width: 100%;
    height: auto;
    flex: 1;
  }

  .image-comparison-container {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    align-items: center;
    gap: 10px;
    padding: 10px;
    width: 100%;
  }

  /* Media Queries for different screen sizes */

  /* Small phones (up to 375px) */
  @media screen and (max-width: 375px) {
    h1 {
      font-size: 24px;
    }

    h2 {
      font-size: 16px;
    }

    p {
      font-size: 12px;
    }

    .navigation {
      gap: 60px;
    }

    .nav-button {
      width: 40px;
      height: 30px;
      font-size: 16px;
    }

    .skin-tone {
      width: 50px;
      height: 50px;
    }

    .image-options img {
      width: 90px;
      height: 90px;
    }

    .image-option img {
      width: 120px;
      height: 120px;
    }

    .comparison-option {
      width: 130px;
      height: 130px;
    }

    #contentid {
      margin-bottom: 100px;
    }
  }

  /* Medium phones (376px - 576px) */
  @media screen and (min-width: 376px) and (max-width: 576px) {
    h1 {
      font-size: 26px;
    }

    h2 {
      font-size: 17px;
    }

    .navigation {
      gap: 70px;
    }

    .skin-tone {
      width: 55px;
      height: 55px;
    }

    .image-container {
      width: 80px;
      height: 80px;
    }

    .selection-arrow {
      width: 14px;
      height: 14px;
      top: -7px;
      right: 7px;
    }

    .image-comparison-container {
      gap: 20px;
    }

    .comparison-option {
      width: 140px;
      height: 140px;
    }

    #contentid {
      margin-bottom: 120px;
    }
  }

  /* Tablets (577px - 768px) */
  @media screen and (min-width: 577px) and (max-width: 768px) {
    h1 {
      font-size: 30px;
    }

    h2 {
      font-size: 20px;
    }

    p {
      font-size: 14px;
      max-width: 90%;
      color: #646464;
    }

    .navigation {
      gap: 100px;
    }

    .nav-button {
      width: 45px;
      height: 35px;
      font-size: 20px;
    }

    .skin-tone {
      width: 65px;
      height: 65px;
    }

    .image-options img {
      width: 110px;
      height: 110px;
    }

    .image-option img {
      width: 160px;
      height: 160px;
    }

    .comparison-option {
      width: 170px;
      height: 170px;
    }

    .image-container {
      width: 90px;
      height: 90px;
    }

    #contentid {
      margin-bottom: 180px;
    }
  }

  /* Larger tablets and small desktops (769px - 992px) */
  @media screen and (min-width: 769px) and (max-width: 992px) {
    h1 {
      font-size: 32px;
    }

    h2 {
      font-size: 21px;
    }

    p {
      font-size: 14px;
      max-width: 80%;
    }

    .navigation {
      gap: 120px;
    }

    .nav-button {
      width: 48px;
      height: 35px;
      font-size: 22px;
    }

    .skin-tone {
      width: 68px;
      height: 68px;
    }

    .image-options img {
      width: 115px;
      height: 115px;
    }

    .image-option img {
      width: 170px;
      height: 170px;
    }

    .comparison-option {
      width: 180px;
      height: 180px;
    }

    .image-container {
      width: 95px;
      height: 95px;
    }

    #contentid {
      margin-bottom: 220px;
    }
  }

  /* Desktops (993px and above) */
  @media screen and (min-width: 993px) {
    h1 {
      font-size: 36px;
    }

    h2 {
      font-size: 19px;
    }

    p {
      font-size: 15px;
      color: #646464;
    }

    .navigation {
      gap: 150px;
    }

    .nav-button {
      width: 50px;
      height: 40px;
      font-size: 22px;
    }

    .skin-tone {
      width: 70px;
      height: 70px;
    }

    .image-options img {
      width: 120px;
      height: 120px;
    }

    .image-option img {
      width: 180px;
      height: 180px;
    }

    .comparison-option {
      width: 200px;
      height: 200px;
    }

    .image-container {
      width: 100px;
      height: 100px;
    }

    #contentid {
      margin-bottom: 275px;
    }

    .options {
      max-width: 400px;
    }
  }

  /* Fix for landscape orientation on mobile devices */
  @media screen and (max-height: 500px) and (orientation: landscape) {
    #app {
      /* height: auto; */
      min-height: 100vh;
    }

    #contentid {
      margin-bottom: 50px;
    }

    .skin-tones,
    .image-options,
    .image-comparison {
      margin: 10px 0;
    }

    h1 {
      font-size: 24px;
      margin-bottom: 5px;
    }

    h2 {
      font-size: 16px;
      margin-bottom: 10px;
    }

    .navigation {
      margin-bottom: 10px;
    }
  }

  /* Finish page styles */
  .result-container {
    text-align: center;
    padding: 20px;
    max-width: 600px;
    margin: 0 auto;
  }

  .skin-size-number {
    font-size: 72px;
    font-weight: bold;
    margin: 30px 0;
    font-family: "Monaco";
    color: #000;
  }

  .white-bg .skin-size-number {
    color: #000;
  }

  .black-bg .skin-size-number {
    color: #fff;
  }

  .result-description {
    font-size: 16px;
    line-height: 1.6;
    margin-top: 20px;
    color: #666;
  }

  @media screen and (max-width: 576px) {
    .skin-size-number {
      font-size: 56px;
    }

    .result-description {
      font-size: 14px;
      padding: 0 20px;
    }
  }

  .category-tabs {
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 40px 0;
  }

  .category-tab {
    color: #777;
    text-decoration: none;
    padding: 0 8px;
    font-size: 18px;
    opacity: 0.5;
    font-family: "Inter", sans-serif;
    font-weight: 300;
  }

  .separator {
    color: #555;
    margin: 0 8px;
    font-size: 18px;
  }

  .category-tab.active {
    color: #fff;
    opacity: 1;
  }

  .arrow-img {
    width: 16px;
    height: 16px;
    object-fit: contain;
    display: block;
  }

  .option-button.selected .option-btn-check-icon {
    display: block;
  }
  .option-button span {
    display: block;
  }
  .option-btn-check-icon {
    position: absolute;
    top: 50%;
    right: 10px;
    transform: translate(-50%, -50%);
    object-fit: contain;
    display: none;
  }
</style>

<script define:vars={{ skinTestData, SavedAnswers, imageCombinationsData }}>
  // Add tracking for last selected options

  // async function handleApiResponse(response) {
  //   if (response.status === 401) {
  //     // Show error message in the current page's error message element
  //     const currentPageElement = document.getElementById(`page${currentPage}`);
  //     const errorMessage = currentPageElement.querySelector(".error-message");
  //     if (errorMessage) {
  //       errorMessage.textContent = "Your session has expired. Please refresh the page to continue.";
  //       errorMessage.style.display = "block";
  //     }

  //     // Disable the next button
  //     const nextButton = currentPageElement.querySelector(".nav-button.next");
  //     if (nextButton) {
  //       nextButton.disabled = true;
  //     }

  //     // Hide the message after 5 seconds and reload the page
  //     setTimeout(() => {
  //       errorMessage.style.display = "none";
  //       window.location.reload();
  //     }, 5000);
  //     return { shouldPreventNavigation: true };
  //   } else if (response.status === 500) {
  //     // Show error message in the current page's error message element
  //     const currentPageElement = document.getElementById(`page${currentPage}`);
  //     const errorMessage = currentPageElement.querySelector(".error-message");
  //     if (errorMessage) {
  //       errorMessage.textContent = "Please try again later.";
  //       errorMessage.style.display = "block";
  //     }

  //     // Disable the next button
  //     // const nextButton = currentPageElement.querySelector(".nav-button.next");
  //     // if (nextButton) {
  //       // nextButton.disabled = true;
  //       // nextButton.style.opacity = "0.5";
  //       // nextButton.style.cursor = "not-allowed";
  //     // }

  //     // Hide the message after 5 seconds
  //     setTimeout(() => {
  //       errorMessage.style.display = "none";
  //     }, 5000);
  //     return { shouldPreventNavigation: true };
  //   }
  //   return { shouldPreventNavigation: false, response };
  // }

  let successNextPage = false;
  async function handleApiResponse(response) {
    if (response.status >= 200 && response.status <= 300) {
      console.log("response ok", response.status);
      successNextPage = true;
      // return;
    } else if (response.status === 401) {
      // Show error message in the current page's error message element
      successNextPage = false;
      const currentPageElement = document.getElementById(`page${currentPage}`);
      const errorMessage = currentPageElement.querySelector(".error-message");
      if (errorMessage) {
        errorMessage.textContent =
          "Your session has expired. Please refresh the page to continue.";
        errorMessage.style.display = "block";
      }

      // Disable the next button
      const nextButton = currentPageElement.querySelector(".nav-button.next");
      if (nextButton) {
        nextButton.disabled = true;
      }
      // Hide the message after 5 seconds and reload the page

      setTimeout(() => {
        errorMessage.style.display = "none";
        window.location.reload();
      }, 5000);

      return {
        shouldPreventNavigation: true,
      };
    } else if (response.status === 500) {
      // Show error message in the current page's error message element
      successNextPage = false;
      const currentPageElement = document.getElementById(`page${currentPage}`);
      const errorMessage = currentPageElement.querySelector(".error-message");
      if (errorMessage) {
        errorMessage.textContent = "Please try again later.";
        errorMessage.style.display = "block";
      }

      // Disable the next button
      // const nextButton = currentPageElement.querySelector(".nav-button.next");
      // if (nextButton) {
      // nextButton.disabled = true;
      // nextButton.style.opacity = "0.5";
      // nextButton.style.cursor = "not-allowed";
      // }
      // Hide the message after 5 seconds

      setTimeout(() => {
        errorMessage.style.display = "none";
      }, 5000);

      return {
        shouldPreventNavigation: true,
      };
    }

    // if (response.status === 401) {
    //   // Show error message in the current page's error message element
    //   const currentPageElement = document.getElementById(`page${currentPage}`);
    //   const errorMessage = currentPageElement.querySelector(".error-message");
    //   if (errorMessage) {
    //     errorMessage.textContent =
    //       "Your session has expired. Please refresh the page to continue.";
    //     errorMessage.style.display = "block";
    //   }
    //   // Disable the next button
    //   const nextButton = currentPageElement.querySelector(".nav-button.next");
    //   if (nextButton) {
    //     nextButton.disabled = true;
    //   }
    //   // Hide the message after 5 seconds and reload the page
    //   setTimeout(() => {
    //     errorMessage.style.display = "none";
    //     window.location.reload();
    //   }, 5000);
    //   return { shouldPreventNavigation: true };
    // } else if (response.status === 500) {
    //   // Show error message in the current page's error message element
    //   const currentPageElement = document.getElementById(`page${currentPage}`);
    //   const errorMessage = currentPageElement.querySelector(".error-message");
    //   if (errorMessage) {
    //     errorMessage.textContent = "Please try again later.";
    //     errorMessage.style.display = "block";
    //   }
    //   // Disable the next button
    //   // const nextButton = currentPageElement.querySelector(".nav-button.next");
    //   // if (nextButton) {
    //   // nextButton.disabled = true;
    //   // nextButton.style.opacity = "0.5";
    //   // nextButton.style.cursor = "not-allowed";
    //   // }
    //   // Hide the message after 5 seconds
    //   setTimeout(() => {
    //     errorMessage.style.display = "none";
    //   }, 5000);
    //   return { shouldPreventNavigation: true };
    // }
    return {
      shouldPreventNavigation: false,
      response,
    };
  }

  async function saveAnswer(formattedAnswer) {
    try {
      const response = await fetch(
        `https://stg-api.klira.skin/api/v1/skin-test/answer`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          credentials: "include",
          body: JSON.stringify(formattedAnswer),
        }
      );
      const result = await handleApiResponse(response);
      if (result.shouldPreventNavigation) return null;
      const responseData = await result.response;
      console.log(responseData);
      return responseData;
    } catch (error) {
      console.error("Error saving answer:", error);
    }
  }

  async function calCulateResults() {
    try {
      const response = await fetch(
        `https://stg-api.klira.skin/api/v1/skin-test/skin-size-score`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
          credentials: "include",
        }
      );
      const result = await handleApiResponse(response);
      if (result.shouldPreventNavigation) return null;
      const responseCalculateData = await result.response.json();
      console.log(responseCalculateData);
      return responseCalculateData;
    } catch (error) {
      console.error("Error calculating results:", error);
    }
  }

  function formatedNumber(number) {
    return number.toString().padStart(2, "0");
  }

  function buildQuestionaire() {
    const questionaire = document.getElementById("categoryQuestions");
    skinTestData.questionaireObject.forEach((category) => {
      const categoryDiv = document.createElement("div");
      categoryDiv.classList.add("page");
      categoryDiv.id = `page${category.pageNumber}`;
      questionaire.appendChild(categoryDiv);

      // Add header with KLIRA logo for main category pages in the flow
      if (
        category.title === "SEBUM" ||
        category.title === "BARRIER" ||
        category.title === "MELANIN" ||
        category.title === "COLLAGEN"
      ) {
        // Add category tabs at the top of each category page
        const categoryTabs = document.createElement("div");
        categoryTabs.classList.add("category-tabs");

        // Create the tabs
        const categories = ["Sebum", "Barrier", "Melanin", "Collagen"];
        categories.forEach((tabName, index) => {
          // Add tab
          const tab = document.createElement("span");
          tab.classList.add("category-tab");
          tab.textContent = tabName;

          // Make the tab active if it matches current category title
          if (tabName.toUpperCase() === category.title) {
            tab.classList.add("active");
          }

          // Add the tab (non-clickable)
          categoryTabs.appendChild(tab);

          // Add separator after each tab except the last one
          if (index < categories.length - 1) {
            const separator = document.createElement("span");
            separator.classList.add("separator");
            separator.textContent = "—";
            categoryTabs.appendChild(separator);
          }
        });

        categoryDiv.appendChild(categoryTabs);
      }

      const titleContent = document.createElement("div");
      titleContent.classList.add("content");

      const title = document.createElement("h1");
      title.textContent = category.title;
      titleContent.appendChild(title);

      const description = document.createElement("p");
      description.textContent = category.description;
      titleContent.appendChild(description);

      // Add title content for all pages
      categoryDiv.appendChild(titleContent);

      if (category.title === "WELCOME") {
        const startButtonContainer = document.createElement("div");
        startButtonContainer.classList.add("start-button-container");

        const startButton = document.createElement("button");
        startButton.classList.add("start-button");
        startButton.textContent = "Start";
        startButton.onclick = () => showPage(category.pageNumber + 1);

        startButtonContainer.appendChild(startButton);
        categoryDiv.appendChild(startButtonContainer);
      } else {
        // Create a navigation with Save Progress button
        const navigationWithSave = document.createElement("div");
        navigationWithSave.classList.add("navigation-with-save");

        const prevButton = document.createElement("button");
        prevButton.classList.add("nav-button", "prev");
        prevButton.innerHTML =
          '<img src="/assets/white-leftarrow.png" alt="Previous" class="arrow-img">';
        prevButton.onclick = () => {
          //Category_Previous_Button
          if (category.pageNumber === 16) {
            page14 = document.getElementById("page14");
            const selectedOption = page14.querySelector(
              ".option-button.selected"
            );
            if (
              selectedOption?.dataset.optionId == "a" ||
              selectedOption?.dataset.optionId == "b"
            ) {
              showPage(14);
            } else {
              showPage(15);
            }
          } else {
            showPage(category.pageNumber - 1);
          }
        };

        // Create the Save Progress button
        // const saveProgressContainer = document.createElement("div");
        // saveProgressContainer.classList.add("save-progress-container");

        // const saveProgressButton = document.createElement("button");
        // saveProgressButton.classList.add("save-progress-button");
        // saveProgressButton.textContent = "Save Progress";
        // saveProgressButton.onclick = async () => {
        //   // Get the current page data
        //   const currentPageElement = document.getElementById(
        //     `page${currentPage}`
        //   );
        //   const selectedOption =
        //     currentPageElement.querySelector(".option-button.selected") ||
        //     currentPageElement.querySelector(".image-container.selected");

        //   if (selectedOption) {
        //     try {
        //       await saveAnswer({
        //         category: category.title,
        //         questionId: category.title === "WELCOME" ? "1" : "1", // Default to 1 if unknown
        //         answerId: selectedOption.dataset.optionId,
        //       });
        //       saveProgressButton.textContent = "Progress Saved ";
        //     } catch (error) {
        //       console.error("Error saving progress:", error);
        //       alert("Failed to save progress. Please try again.");
        //     }
        //   } else {
        //     saveProgressButton.textContent = "Progress Saved ";
        //   }
        // };

        // saveProgressContainer.appendChild(saveProgressButton);

        const nextButton = document.createElement("button");
        nextButton.classList.add("nav-button", "next");
        nextButton.onclick = () => {
          showPage(category.pageNumber + 1);
        };
        nextButton.innerHTML =
          '<img src="/assets/black-rightarrow.png" alt="Next" class="arrow-img">';

        navigationWithSave.appendChild(prevButton);
        // navigationWithSave.appendChild(saveProgressContainer);
        navigationWithSave.appendChild(nextButton);

        categoryDiv.appendChild(navigationWithSave);
      }

      category.questionaire.forEach((question) => {
        const questionPage = document.createElement("div");
        questionPage.classList.add("page");
        questionPage.id = `page${question.pageNumber}`;
        questionaire.appendChild(questionPage);

        const questionPageContent = document.createElement("div");
        questionPageContent.classList.add("content");

        const questionProgress = document.createElement("div");
        questionProgress.classList.add("progress");

        if (!(question.pageNumber == 2 || question.pageNumber == 3)) {
          if (category.title == "SEBUM") {
            questionProgress.textContent = `${formatedNumber(question.number)}/10`;
          }
          if (category.title == "BARRIER") {
            questionProgress.textContent = `${formatedNumber(question.number)}/14`;
          }
          if (category.title == "MELANIN") {
            questionProgress.textContent = `${formatedNumber(question.number)}/11`;
          }
          if (category.title == "COLLAGEN") {
            questionProgress.textContent = `${formatedNumber(question.number)}/15`;
          }
          questionPageContent.appendChild(questionProgress);
        }

        const questionTitle = document.createElement("h2");
        questionTitle.textContent = question.question;
        questionPageContent.appendChild(questionTitle);

        if (question?.hint) {
          const hintElement = document.createElement("p");
          hintElement.textContent = question.hint;
          questionPageContent.appendChild(hintElement);
        }

        if (question.imagesPresent) {
          const imageComparisonContainer = document.createElement("div");
          imageComparisonContainer.classList.add("image-comparison-container");
          questionPageContent.appendChild(imageComparisonContainer);

          question.images.forEach((image) => {
            const comparisonOption = document.createElement("div");
            comparisonOption.classList.add("image-container");
            comparisonOption.dataset.optionId = image?.optionId;
            comparisonOption.dataset.category = category.title.toLowerCase();
            comparisonOption.dataset.questionNumber = question.number;

            // ------ skin color selection and barrier question 12
            if (SavedAnswers?.data?.answers?.[category.title]) {
              const savedAnswer = SavedAnswers.data.answers[
                category.title
              ].find(
                (answer) =>
                  answer.questionId === question.number &&
                  answer.answerId === image.optionId
              );
              if (savedAnswer) {
                comparisonOption.classList.add("selected");
              }
            }

            const imageElement = document.createElement("img");
            imageElement.src = image.src;
            imageElement.alt = image.alt;
            imageElement.classList.add("comparison-image");

            comparisonOption.appendChild(imageElement);

            imageComparisonContainer.appendChild(comparisonOption);

            if (question?.optionsType === "image") {
              const selectionArrow = document.createElement("div");
              selectionArrow.classList.add("selection-arrow");
              comparisonOption.appendChild(selectionArrow);

              comparisonOption.addEventListener("click", async function () {
                // Check if the container is already selected
                if (this.classList.contains("selected")) {
                  return; // Exit early if already selected
                }

                imageComparisonContainer
                  .querySelectorAll(".image-container")
                  .forEach((opt) => {
                    opt.classList.remove("selected");
                  });

                this.classList.add("selected");

                const errorMessage =
                  questionPageContent.querySelector(".error-message");
                if (errorMessage) {
                  errorMessage.style.display = "none";
                }

                try {
                  await saveAnswer({
                    category: category.title,
                    questionId: question.number,
                    answerId: this.dataset.optionId,
                  });
                  //------
                } catch (error) {
                  console.error("Error saving answer:", error);
                }
              });
            }
          });

          // Only add error message here if this is NOT page 11, 33, or 36
          if (
            question.pageNumber !== 11 &&
            question.pageNumber !== 33 &&
            question.pageNumber !== 36
          ) {
            const errorMessage = document.createElement("p");
            errorMessage.classList.add("error-message");
            errorMessage.textContent = "Please give your answer";
            questionPageContent.appendChild(errorMessage);
          }
        }

        if (question.optionsPresent) {
          const questionOptions = document.createElement("div");
          questionOptions.classList.add("options");

          question.options.forEach((option) => {
            const optionButton = document.createElement("button");
            const optionButtonSpan = document.createElement("span");
            const optionButtonCheckSvg = document.createElement("img");
            optionButtonCheckSvg.classList.add("option-btn-check-icon");
            optionButtonCheckSvg.src = "/assets/check-icon.svg";

            optionButton.classList.add("option-button");

            optionButtonSpan.textContent = option.text;
            optionButton.dataset.optionId = option?.optionId;

            // Check for saved answer and mark as selected if found
            if (SavedAnswers?.data?.answers?.[category.title]) {
              const savedAnswer = SavedAnswers.data.answers[
                category.title
              ].find(
                (answer) =>
                  answer.questionId === question.number &&
                  answer.answerId === option.optionId
              );
              if (savedAnswer) {
                optionButton.classList.add("selected");
              }
            }

            questionOptions.appendChild(optionButton);
            optionButton.appendChild(optionButtonSpan);
            optionButton.appendChild(optionButtonCheckSvg);

            optionButton.addEventListener("click", async function () {
              // Check if the option is already selected
              if (this.classList.contains("selected")) {
                return; // Exit early if already selected
              }

              const parentOptions = this.closest(".options");
              if (parentOptions) {
                parentOptions
                  .querySelectorAll(".option-button")
                  .forEach((btn) => {
                    btn.classList.remove("selected");
                  });
              }

              this.classList.add("selected");

              const errorMessage =
                questionPageContent.querySelector(".error-message");
              if (errorMessage) {
                errorMessage.style.display = "none";
              }

              // Save answer immediately when an option is selected
              try {
                await saveAnswer({
                  category: category.title,
                  questionId: question.number,
                  answerId: this.dataset.optionId,
                });
              } catch (error) {
                console.error("Error saving answer:", error);
              }
            });
          });
          questionPageContent.appendChild(questionOptions);

          // Always add error message after options
          // For pages 11, 33, and 36, this will be the only error message
          const errorMessage = document.createElement("p");
          errorMessage.classList.add("error-message");
          errorMessage.textContent = "Please give your answer";
          questionPageContent.appendChild(errorMessage);
        }

        questionPage.appendChild(questionPageContent);

        const questionNavigation = document.createElement("div");
        questionNavigation.classList.add("navigation");

        const questionPrevButton = document.createElement("button");
        questionPrevButton.classList.add("nav-button");
        questionPrevButton.classList.add("prev");

        questionPrevButton.onclick = () => {
          //Barrier Page 10a Handling

          if (question.pageNumber === 19) {
            tenAOption = document
              .getElementById("page17")
              .querySelector(".option-button.selected");
            if (
              tenAOption?.dataset.optionId === "a" ||
              tenAOption?.dataset.optionId === "b"
            ) {
              showPage(question.pageNumber - 2);
            } else {
              showPage(question.pageNumber - 1);
            }
          }

          if (!(question.pageNumber === 19)) {
            showPage(question.pageNumber - 1);
          }
        };
        questionPrevButton.innerHTML =
          '<img src="/assets/black-leftarrow.png" alt="Previous" class="arrow-img">';

        const questionNextButton = document.createElement("button");
        questionNextButton.classList.add("nav-button");
        questionNextButton.classList.add("next");

        if (question.pageNumber === 59) {
          // For the last page, create a Calculate Results button
          const calculateResultsButton = document.createElement("button");
          calculateResultsButton.classList.add("calculate-results-button");
          calculateResultsButton.textContent = "Calculate Results";
          calculateResultsButton.onclick = async () => {
            // Check if an option is selected
            const selectedOption =
              questionPage.querySelector(".option-button.selected") ||
              questionPage.querySelector(".image-container.selected");

            if (
              !selectedOption &&
              (question.optionsPresent || question.imagesPresent)
            ) {
              const errorMessage = questionPage.querySelector(".error-message");
              if (errorMessage) {
                errorMessage.style.display = "block";
              }
            } else {
              // Disable the button to prevent multiple clicks
              calculateResultsButton.disabled = true;
              calculateResultsButton.style.opacity = "0.5";

              try {
                const responseCalculateData = await calCulateResults();
                if (responseCalculateData.success) {
                  // Remove the token cookie as the test is now complete

                  // Hide all pages
                  const pages = document.querySelectorAll(".page");
                  pages.forEach((page) => {
                    page.style.display = "none";
                  });
                  finishPageUrl = responseCalculateData.data.redirectionLink;
                  window.top.location.href = finishPageUrl;

                  // Show finish page and update skin size
                  // const finishPage = document.getElementById("finishPage");
                  // const skinSizeNumber =
                  //   finishPage.querySelector(".skin-size-number");
                  // skinSizeNumber.textContent =
                  //   responseCalculateData.data.finalScore;
                  // finishPage.style.display = "flex";

                  // // Set background to white for finish page
                  // document.body.classList.remove("black-bg");
                  // document.body.classList.add("white-bg");
                }
              } catch (error) {
                console.error("Error calculating results:", error);
                // Re-enable the button if there's an error
                calculateResultsButton.disabled = false;
                calculateResultsButton.style.opacity = "1";
              }
            }
          };

          // Create a navigation with Save Progress button (using the same structure as other pages)
          const navigationWithSave = document.createElement("div");
          navigationWithSave.classList.add("navigation-with-save");

          // Add Save Progress button to the last page
          const saveProgressContainer = document.createElement("div");
          saveProgressContainer.classList.add("save-progress-container");

          const saveProgressButton = document.createElement("button");
          saveProgressButton.classList.add("save-progress-button");
          saveProgressButton.textContent = "Save Progress";
          saveProgressButton.onclick = async () => {
            // Get the selected option

            const saveResult = await saveAnswer({
              category: "SAVE_PROGRESS",
              questionId: "1",
              answerId: "a",
            });
            if(saveResult?.status === 200){
               window.top.location.href =  "https://stg.klira.skin/online-test/saved/";
               console.log("saveResult", saveResult.status);
            }
          };

          saveProgressContainer.appendChild(saveProgressButton);

          navigationWithSave.appendChild(questionPrevButton);
          navigationWithSave.appendChild(saveProgressContainer);
          navigationWithSave.appendChild(calculateResultsButton);

          questionNavigation.appendChild(navigationWithSave);
        } else {
          // Create a navigation with Save Progress button
          const navigationWithSave = document.createElement("div");
          navigationWithSave.classList.add("navigation-with-save");

          // Create the Save Progress button
          const saveProgressContainer = document.createElement("div");
          saveProgressContainer.classList.add("save-progress-container");

          const saveProgressButton = document.createElement("button");
          saveProgressButton.classList.add("save-progress-button");
          saveProgressButton.textContent = "Save Progress";
          saveProgressButton.onclick = async () => {
            const saveResult = await saveAnswer({
              category: "SAVE_PROGRESS",
              questionId: "1",
              answerId: "a",
            });
            if(saveResult?.status === 200){
              window.top.location.href =  "https://stg.klira.skin/online-test/saved/";
              console.log("saveResult", saveResult?.status);
            } 
          };

          saveProgressContainer.appendChild(saveProgressButton);

          questionNextButton.onclick = async () => {
            // Check if an option is selected
            const selectedOption =
              questionPage.querySelector(".option-button.selected") ||
              questionPage.querySelector(".image-container.selected");

            if (
              !selectedOption &&
              (question.optionsPresent || question.imagesPresent)
            ) {
              const errorMessage = questionPage.querySelector(".error-message");
              if (errorMessage) {
                errorMessage.style.display = "block";
              }
            } else {
              if (question.pageNumber === 3) {
                // Get selected gender from page 2
                const genderPage = document.getElementById("page2");
                const selectedGender = genderPage.querySelector(
                  ".option-button.selected"
                );
                const gender = selectedGender?.dataset.optionId;

                // Get selected skin color
                const skinColor = selectedOption?.dataset.optionId;

                // Find matching combination from the combinations array
                const combination = imageCombinationsData.combinations.find(
                  (combo) =>
                    combo.genderPage === gender &&
                    combo.skinColorPage === skinColor
                );

                if (combination) {
                  // Update images for each category
                  const categories = [
                    "sebum",
                    "barrier",
                    "melanin",
                    "collagen",
                  ];
                  categories.forEach((category) => {
                    const categoryQuestions =
                      combination.questions[0][category];
                    if (categoryQuestions) {
                      categoryQuestions.forEach((q) => {
                        // Find all image containers with matching category and question number
                        const imageContainers = document.querySelectorAll(
                          `.image-container[data-category="${category}"][data-question-number="${q.questionNumber}"]`
                        );

                        // Find the image comparison container
                        const imageComparisonContainer =
                          imageContainers[0]?.closest(
                            ".image-comparison-container"
                          );

                        if (imageComparisonContainer) {
                          // Clear all existing images
                          imageComparisonContainer.innerHTML = "";

                          // Add new images from imageCombinations.json
                          q.images.forEach((image) => {
                            if (image.src && image.alt) {
                              const container = document.createElement("div");
                              container.classList.add("image-container");
                              container.dataset.optionId = image.optionId || "";
                              container.dataset.category = category;
                              container.dataset.questionNumber =
                                q.questionNumber;

                              const img = document.createElement("img");
                              img.src = image.src;
                              img.alt = image.alt;
                              img.classList.add("comparison-image");

                              // Add selection arrow
                              const selectionArrow =
                                document.createElement("div");
                              selectionArrow.classList.add("selection-arrow");
                              container.appendChild(img);
                              container.appendChild(selectionArrow);

                              //Add click event listener
                              container.addEventListener(
                                "click",
                                async function () {
                                  // Check if the container is already selected
                                  if (this.classList.contains("selected")) {
                                    return; // Exit early if already selected
                                  }

                                  imageComparisonContainer
                                    .querySelectorAll(".image-container")
                                    .forEach((opt) => {
                                      opt.classList.remove("selected");
                                    });

                                  if (image.optionId) {
                                    this.classList.add("selected");
                                  }

                                  const errorMessage =
                                    this.closest(".content").querySelector(
                                      ".error-message"
                                    );
                                  if (errorMessage) {
                                    errorMessage.style.display = "none";
                                  }

                                  if (image.optionId) {
                                    try {
                                      await saveAnswer({
                                        category: category.toUpperCase(),
                                        questionId: q.questionNumber,
                                        answerId: this.dataset.optionId,
                                      });
                                    } catch (error) {
                                      console.error(
                                        "Error saving answer:",
                                        error
                                      );
                                    }
                                  }
                                }
                              );

                              imageComparisonContainer.appendChild(container);
                            }
                          });
                        }
                      });
                    }
                  });
                }
              }

              if (question.pageNumber === 14) {
                tenAOption = document
                  .getElementById("page14")
                  .querySelector(".option-button.selected");
                if (
                  tenAOption?.dataset.optionId === "a" ||
                  tenAOption?.dataset.optionId === "b"
                ) {
                  showPage(question.pageNumber + 2);
                } else {
                  showPage(question.pageNumber + 1);
                }
              } else if (question.pageNumber === 17) {
                tenAOption = document
                  .getElementById("page17")
                  .querySelector(".option-button.selected");
                if (
                  tenAOption?.dataset.optionId === "a" ||
                  tenAOption?.dataset.optionId === "b"
                ) {
                  showPage(question.pageNumber + 2);
                } else {
                  showPage(question.pageNumber + 1);
                }
              } else {
                showPage(question.pageNumber + 1);
              }
            }
          };
          questionNextButton.innerHTML =
            '<img src="/assets/white-rightarrow.png" alt="Next" class="arrow-img">';

          navigationWithSave.appendChild(questionPrevButton);
          navigationWithSave.appendChild(saveProgressContainer);
          navigationWithSave.appendChild(questionNextButton);

          questionNavigation.appendChild(navigationWithSave);
        }

        questionPage.appendChild(questionNavigation);
      });
    });
  }

  function showPage(pageNumber) {
    const pages = document.querySelectorAll(".page");
    pages.forEach((page) => {
      page.style.display = "none";
    });

    if (pageNumber === 60) {
      document.getElementById("finishPage").style.display = "flex";
    } else {
      document.getElementById(`page${pageNumber}`).style.display = "flex";
    }

    currentPage = pageNumber;

    if (
      currentPage === 1 ||
      currentPage === 4 ||
      currentPage === 16 ||
      currentPage === 32 ||
      currentPage === 44
    ) {
      document.body.classList.remove("white-bg");
      document.body.classList.add("black-bg");
    } else {
      document.body.classList.remove("black-bg");
      document.body.classList.add("white-bg");
    }

    window.scrollTo(0, 0);
  }

  // if (!document.cookie.includes("user_jwt_token=")) {
  //   tokenN =
  //     "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE3NDI4MDkyODEsImV4cCI6MTc0NDAxODg4MSwidXNlcklkIjozNTIwMX0.BZVaBD8xP__1sFIeW8iNqbzD80ZfQXVl5CKqK64hsyA";
  //   document.cookie = `user_jwt_token=${tokenN}; path=/; max-age=3600; `;
  //   console.log(
  //     "Created New Token cookie set on client side:",
  //     document.cookie
  //   );
  // }

  let currentPage = 1;

  buildQuestionaire();

  // Add keyboard navigation
  document.addEventListener("keydown", function (event) {
    if (successNextPage) {
      const currentPageElement = document.getElementById(`page${currentPage}`);
      if (!currentPageElement) return;

      switch (event.key) {
        case "ArrowLeft":
          // Navigate to previous page
          const prevButton =
            currentPageElement.querySelector(".nav-button.prev");
          if (prevButton) {
            prevButton.click();
          }
          break;

        case "ArrowRight":
          // Navigate to next page
          const nextButton =
            currentPageElement.querySelector(".nav-button.next");
          if (nextButton) {
            nextButton.click();
          }
          break;

        case "ArrowUp":
          // Select previous option
          const options = currentPageElement.querySelectorAll(
            ".option-button, .image-container"
          );
          const selectedOption = currentPageElement.querySelector(
            ".option-button.selected, .image-container.selected"
          );

          if (options.length > 0) {
            if (selectedOption) {
              const currentIndex = Array.from(options).indexOf(selectedOption);
              const prevIndex =
                (currentIndex - 1 + options.length) % options.length;
              options[prevIndex].click();
            } else {
              options[0].click();
            }
          }
          break;

        case "ArrowDown":
          // Select next option
          const allOptions = currentPageElement.querySelectorAll(
            ".option-button, .image-container"
          );
          const currentlySelected = currentPageElement.querySelector(
            ".option-button.selected, .image-container.selected"
          );

          if (allOptions.length > 0) {
            if (currentlySelected) {
              const currentIndex =
                Array.from(allOptions).indexOf(currentlySelected);
              const nextIndex = (currentIndex + 1) % allOptions.length;
              allOptions[nextIndex].click();
            } else {
              allOptions[0].click();
            }
          }
          break;
      }
    }
  });

  // Update current page based on saved answers if available
  if (SavedAnswers?.data?.answers) {
    console.log(" already cookie present ", SavedAnswers);
    const answers = SavedAnswers?.data?.answers;

    // Get saved gender and skin color answers
    const welcomeAnswers = answers["WELCOME"];
    const genderAnswer = welcomeAnswers?.find((a) => a.questionId === "1");
    const skinColorAnswer = welcomeAnswers?.find((a) => a.questionId === "2");

    // If both gender and skin color are saved, update images
    if (genderAnswer && skinColorAnswer) {
      // Find matching combination from the combinations array
      const combination = imageCombinationsData.combinations.find(
        (combo) =>
          combo.genderPage === genderAnswer.answerId &&
          combo.skinColorPage === skinColorAnswer.answerId
      );

      if (combination) {
        // Update images for each category
        const categories = ["sebum", "barrier", "melanin", "collagen"];
        categories.forEach((category) => {
          const categoryQuestions = combination.questions[0][category];
          if (categoryQuestions) {
            categoryQuestions.forEach((q) => {
              // Find all image containers with matching category and question number
              const imageContainers = document.querySelectorAll(
                `.image-container[data-category="${category}"][data-question-number="${q.questionNumber}"]`
              );

              // Find the image comparison container
              const imageComparisonContainer = imageContainers[0]?.closest(
                ".image-comparison-container"
              );

              if (imageComparisonContainer) {
                // Clear all existing images
                imageComparisonContainer.innerHTML = "";

                // Add new images from imageCombinations.json
                q.images.forEach((image) => {
                  if (image.src && image.alt) {
                    const container = document.createElement("div");
                    container.classList.add("image-container");
                    container.dataset.optionId = image.optionId || "";
                    container.dataset.category = category;
                    container.dataset.questionNumber = q.questionNumber;

                    const img = document.createElement("img");
                    img.src = image.src;
                    img.alt = image.alt;
                    img.classList.add("comparison-image");

                    // Add selection arrow
                    const selectionArrow = document.createElement("div");
                    selectionArrow.classList.add("selection-arrow");
                    container.appendChild(img);
                    container.appendChild(selectionArrow);

                    // Check for saved answer and mark as selected if found
                    if (answers[category.toUpperCase()]) {
                      const savedAnswer = answers[category.toUpperCase()].find(
                        (answer) =>
                          answer.questionId === q.questionNumber &&
                          answer.answerId === image.optionId
                      );
                      if (savedAnswer && image.optionId) {
                        container.classList.add("selected");
                      }
                    }

                    // Add click event listener
                    container.addEventListener("click", async function () {
                      // Check if the container is already selected
                      if (this.classList.contains("selected")) {
                        return; // Exit early if already selected
                      }

                      imageComparisonContainer
                        .querySelectorAll(".image-container")
                        .forEach((opt) => opt.classList.remove("selected"));

                      if (image.optionId) {
                        this.classList.add("selected");
                      }

                      const errorMessage =
                        this.closest(".content").querySelector(
                          ".error-message"
                        );
                      if (errorMessage) {
                        errorMessage.style.display = "none";
                      }

                      if (image.optionId) {
                        try {
                          await saveAnswer({
                            category: category.toUpperCase(),
                            questionId: q.questionNumber,
                            answerId: this.dataset.optionId,
                          });
                        } catch (error) {
                          console.error("Error saving answer:", error);
                        }
                      }
                    });

                    imageComparisonContainer.appendChild(container);
                  }
                });
              }
            });
          }
        });
      }
    }

    const categoryOrder = [
      "WELCOME",
      "SEBUM",
      "BARRIER",
      "MELANIN",
      "COLLAGEN",
    ];

    // Sort answers by category order and sort questions within each category
    const sortedAnswers = {};
    categoryOrder.forEach((category) => {
      if (answers[category]) {
        // Sort questions within each category by questionId
        sortedAnswers[category] = answers[category].sort((a, b) => {
          const numA = parseInt(a.questionId);
          const numB = parseInt(b.questionId);
          return numA - numB;
        });
      }
    });

    // Find the last category with answers
    const lastCategory = Object.keys(sortedAnswers).pop();

    if (lastCategory && sortedAnswers[lastCategory].length > 0) {
      // Get the last answer from the sorted last category
      const lastAnswer =
        sortedAnswers[lastCategory][sortedAnswers[lastCategory].length - 1];

      // Find the corresponding page number
      const categoryData = skinTestData.questionaireObject.find(
        (cat) => cat.title === lastCategory
      );
      if (categoryData) {
        const question = categoryData.questionaire.find(
          (q) => q.number === lastAnswer.questionId
        );
        if (question) {
          // Handle special page navigation based on specific conditions
          if (question.pageNumber === 14) {
            const page14Answer = sortedAnswers[lastCategory].find(
              (a) => a.questionId === question.number
            );
            if (
              page14Answer &&
              (page14Answer.answerId === "a" || page14Answer.answerId === "b")
            ) {
              currentPage = question.pageNumber + 2;
            } else {
              currentPage = question.pageNumber + 1;
            }
          } else if (question.pageNumber === 17) {
            const page17Answer = sortedAnswers[lastCategory].find(
              (a) => a.questionId === question.number
            );
            if (
              page17Answer &&
              (page17Answer.answerId === "a" || page17Answer.answerId === "b")
            ) {
              currentPage = question.pageNumber + 2;
            } else {
              currentPage = question.pageNumber + 1;
            }
          } else {
              currentPage = question.pageNumber + 1;
          }
        }
      }
    }
  }

  showPage(currentPage);
</script>
